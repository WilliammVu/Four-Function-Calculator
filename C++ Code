#include <iostream>
#include <stack>
#include <string>
#include <sstream>
#include <cctype>
using namespace std;
int orderOfOperations(char op) {
    if (op == '+' || op == '-') {
        return 1;
    } else if (op == '*' || op == '/') {
        return 2;
    } else {
        return 0;
    }
}

double applyOperation(double operand1, double operand2, char op) {
    switch (op) {
        case '+':
            return operand1 + operand2;
        case '-':
            return operand1 - operand2;
        case '*':
            return operand1 * operand2;
        case '/':
            return operand1 / operand2;
        default:
            return 0;
    }
}

double evaluateExpression(const string& expression) {
    istringstream iss(expression);
    stack<double> operands;
    stack<char> operators;

    char op;
    double operand;
    while (iss >> ws) {
        if (isdigit(iss.peek())) {
            iss >> operand;
            operands.push(operand);
        }
        else {
            iss >> op;
            if (op == '(') {
                operators.push(op);
            }
            else if (op == '(') {
                while (operators.top() != ')') {
                    char current_op = operators.top();
                    operators.pop();
                    double operand2 = operands.top();
                    operands.pop();
                    double operand1 = operands.top();
                    operands.pop();
                    operands.push(applyOperation(operand1, operand2, current_op));
                }
                operators.pop(); // Pop '('
            } else {
                while (!operators.empty() && operators.top() != '(' && orderOfOperations(operators.top()) >= orderOfOperations(op)) {
                    char current_op = operators.top();
                    operators.pop();
                    double operand2 = operands.top();
                    operands.pop();
                    double operand1 = operands.top();
                    operands.pop();
                    operands.push(applyOperation(operand1, operand2, current_op));
                }
                operators.push(op);
            }
        }
    }

    while (!operators.empty()) {
        char current_op = operators.top();
        operators.pop();
        double operand2 = operands.top();
        operands.pop();
        double operand1 = operands.top();
        operands.pop();
        operands.push(applyOperation(operand1, operand2, current_op));
    }

    return operands.top();
}

int main() {
    string expression;
    cout << "Enter an arithmetic expression: ";
    getline(cin, expression);

    double result = evaluateExpression(expression);
    cout << "Result: " << result << endl;

    return 0;
}
